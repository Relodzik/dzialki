package pl.gitdzialki;

import com.sk89q.worldedit.IncompleteRegionException;
import com.sk89q.worldedit.bukkit.BukkitAdapter;
import com.sk89q.worldedit.math.BlockVector3;
import com.sk89q.worldedit.regions.CuboidRegion;
import com.sk89q.worldedit.regions.Region;
import com.sk89q.worldguard.WorldGuard;
import com.sk89q.worldguard.bukkit.WorldGuardPlugin;
import com.sk89q.worldguard.protection.flags.Flags;
import com.sk89q.worldguard.protection.flags.StateFlag;
import com.sk89q.worldguard.protection.managers.RegionManager;
import com.sk89q.worldguard.protection.regions.ProtectedCuboidRegion;
import com.sk89q.worldguard.protection.regions.ProtectedRegion;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class PlotManager {

    private final Main plugin;
    private final WorldGuardPlugin worldGuard;
    private final Map<UUID, String> playerRegions; // Mapa UUID gracza na nazwę regionu WorldGuarda

    public PlotManager(Main plugin, WorldGuardPlugin worldGuard) {
        this.plugin = plugin;
        this.worldGuard = worldGuard;
        this.playerRegions = new HashMap<>();
    }

    public void createPlot(Player player, Location location) {
        if (playerRegions.containsKey(player.getUniqueId())) {
            player.sendMessage(ChatColor.RED + "Posiadasz już działkę!");
            return;
        }

        String regionName = "dzialka_" + player.getUniqueId().toString().substring(0, 8); // Unikalna nazwa regionu
        RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(location.getWorld()));

        if (regionManager == null) {
            player.sendMessage(ChatColor.RED + "Nie można utworzyć działki w tym świecie!");
            return;
        }

        // Tworzenie regionu 17x17 (8 bloków w każdą stronę od lokalizacji)
        int x = location.getBlockX();
        int z = location.getBlockZ();
        int y = location.getBlockY();
        BlockVector3 min = BlockVector3.at(x - 8, 0, z - 8);
        BlockVector3 max = BlockVector3.at(x + 8, location.getWorld().getMaxHeight(), z + 8);
        ProtectedCuboidRegion region = new ProtectedCuboidRegion(regionName, min, max);

        // Ustawienie właściciela regionu
        region.getOwners().addPlayer(player.getUniqueId());

        // Ustawienie flag dla ochrony (blokowanie budowania, niszczenia, interakcji, itp.)
        region.setFlag(Flags.BUILD, StateFlag.State.DENY);
        region.setFlag(Flags.DESTROY, StateFlag.State.DENY);
        region.setFlag(Flags.INTERACT, StateFlag.State.DENY);
        region.setFlag(Flags.USE, StateFlag.State.DENY);
        region.setFlag(Flags.PISTON, StateFlag.State.DENY); // Blokowanie tłoków
        region.setFlag(Flags.LAVA_FLOW, StateFlag.State.DENY); // Blokowanie przepływu lawy
        region.setFlag(Flags.WATER_FLOW, StateFlag.State.DENY); // Blokowanie przepływu wody
        region.setFlag(Flags.SNOW_FALL, StateFlag.State.DENY); // Blokowanie proszku śnieżnego (jeśli dotyczy)

        // Zapisanie regionu
        regionManager.addRegion(region);
        playerRegions.put(player.getUniqueId(), regionName);
        player.sendMessage(ChatColor.GREEN + "Utworzono działkę z użyciem WorldGuard!");

        savePlots();
    }

    public void removePlot(Player player, Location location) {
        if (!playerRegions.containsKey(player.getUniqueId())) {
            player.sendMessage(ChatColor.RED + "Nie posiadasz działki!");
            return;
        }

        String regionName = playerRegions.get(player.getUniqueId());
        RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(location.getWorld()));

        if (regionManager != null && regionManager.hasRegion(regionName)) {
            regionManager.removeRegion(regionName);
            playerRegions.remove(player.getUniqueId());
            player.sendMessage(ChatColor.GREEN + "Usunięto działkę!");
            savePlots();
        } else {
            player.sendMessage(ChatColor.RED + "Nie znaleziono działki do usunięcia!");
        }
    }

    public boolean isPlot(Location location) {
        RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(location.getWorld()));
        if (regionManager != null) {
            com.sk89q.worldedit.util.Location weLoc = BukkitAdapter.adapt(location);
            return regionManager.getApplicableRegions(weLoc).size() > 0; // Sprawdza, czy lokalizacja jest w jakimkolwiek regionie
        }
        return false;
    }

    public UUID getPlotOwner(Location location) {
        RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(location.getWorld()));
        if (regionManager != null) {
            com.sk89q.worldedit.util.Location weLoc = BukkitAdapter.adapt(location);
            for (ProtectedRegion region : regionManager.getApplicableRegions(weLoc)) {
                for (UUID owner : region.getOwners().getUniqueIds()) {
                    if (playerRegions.containsValue(region.getId())) {
                        return owner;
                    }
                }
            }
        }
        return null;
    }

    public boolean hasPlot(Player player) {
        return playerRegions.containsKey(player.getUniqueId());
    }

    public Location getPlotLocation(Player player) {
        if (playerRegions.containsKey(player.getUniqueId())) {
            String regionName = playerRegions.get(player.getUniqueId());
            RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(player.getWorld()));
            if (regionManager != null) {
                ProtectedRegion region = regionManager.getRegion(regionName);
                if (region instanceof ProtectedCuboidRegion) {
                    BlockVector3 center = ((ProtectedCuboidRegion) region).getCenter();
                    return BukkitAdapter.adapt(player.getWorld(), center);
                }
            }
        }
        return null;
    }

    public void updatePlotLocation(Player player, Location newLocation) {
        if (!playerRegions.containsKey(player.getUniqueId())) {
            player.sendMessage(ChatColor.RED + "Nie posiadasz działki!");
            return;
        }

        String regionName = playerRegions.get(player.getUniqueId());
        RegionManager regionManager = WorldGuard.getInstance().getPlatform().getRegionContainer().get(BukkitAdapter.adapt(newLocation.getWorld()));

        if (regionManager != null && regionManager.hasRegion(regionName)) {
            ProtectedRegion region = regionManager.getRegion(regionName);
            if (region instanceof ProtectedCuboidRegion) {
                int x = newLocation.getBlockX();
                int z = newLocation.getBlockZ();
                int y = newLocation.getBlockY();
                BlockVector3 min = BlockVector3.at(x - 8, 0, z - 8);
                BlockVector3 max = BlockVector3.at(x + 8, newLocation.getWorld().getMaxHeight(), z + 8);
                ((ProtectedCuboidRegion) region).setMinimumPoint(min);
                ((ProtectedCuboidRegion) region).setMaximumPoint(max);
                region.setFlag(Flags.BUILD, StateFlag.State.DENY);
                region.setFlag(Flags.DESTROY, StateFlag.State.DENY);
                region.setFlag(Flags.INTERACT, StateFlag.State.DENY);
                region.setFlag(Flags.USE, StateFlag.State.DENY);
                region.setFlag(Flags.PISTON, StateFlag.State.DENY);
                region.setFlag(Flags.LAVA_FLOW, StateFlag.State.DENY);
                region.setFlag(Flags.WATER_FLOW, StateFlag.State.DENY);
                region.setFlag(Flags.SNOW_FALL, StateFlag.State.DENY);
                player.sendMessage(ChatColor.GREEN + "Przeniesiono działkę na aktualną pozycję!");
                savePlots();
            }
        }
    }

    public void savePlots() {
        plugin.getConfig().set("plots", null);
        for (Map.Entry<UUID, String> entry : playerRegions.entrySet()) {
            UUID uuid = entry.getKey();
            String regionName = entry.getValue();
            plugin.getConfig().set("plots." + uuid.toString(), regionName);
        }
        plugin.saveConfig();
    }

    public void loadPlots() {
        playerRegions.clear();
        if (plugin.getConfig().contains("plots")) {
            for (String uuidString : plugin.getConfig().getConfigurationSection("plots").getKeys(false)) {
                UUID uuid = UUID.fromString(uuidString);
                String regionName = plugin.getConfig().getString("plots." + uuidString);
                playerRegions.put(uuid, regionName);
            }
        }
    }
}