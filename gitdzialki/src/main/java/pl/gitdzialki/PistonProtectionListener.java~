package pl.gitdzialki;

import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;

import java.util.UUID;

public class PistonProtectionListener implements Listener {

    private final PlotManager plotManager;

    public PistonProtectionListener(PlotManager plotManager) {
        this.plotManager = plotManager;
    }

    @EventHandler
    public void onPistonExtend(BlockPistonExtendEvent event) {
        Block piston = event.getBlock();
        if (isOwner(piston.getLocation())) {
            return; // Jeśli gracz jest właścicielem, zezwalamy na ruch
        }

        BlockFace face = event.getDirection();
        int dx = face.getModX();
        int dy = face.getModY();
        int dz = face.getModZ();

        for (Block block : event.getBlocks()) {
            Location from = block.getLocation();
            Location to = from.clone().add(dx, dy, dz);
            if (!canMoveBlock(piston.getLocation(), from, to)) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @EventHandler
    public void onPistonRetract(BlockPistonRetractEvent event) {
        if (!event.isSticky()) return;

        Block piston = event.getBlock();
        if (isOwner(piston.getLocation())) {
            return; // Jeśli gracz jest właścicielem, zezwalamy na ruch
        }

        BlockFace face = event.getDirection();
        int dx = face.getModX();
        int dy = face.getModY();
        int dz = face.getModZ();

        for (Block block : event.getBlocks()) {
            Location from = block.getLocation();
            Location to = from.clone().subtract(dx, dy, dz);
            if (!canMoveBlock(piston.getLocation(), from, to)) {
                event.setCancelled(true);
                return;
            }
        }
    }

    private boolean canMoveBlock(Location pistonLoc, Location from, Location to) {
        boolean fromInPlot = plotManager.isPlot(from);
        boolean toInPlot = plotManager.isPlot(to);

        if (!fromInPlot && !toInPlot) {
            return true;
        }

        if (!plotManager.isPlot(pistonLoc)) {
            return false;
        }

        if (fromInPlot) {
            if (!plotManager.getPlotOwner(pistonLoc).equals(plotManager.getPlotOwner(from))) {
                return false;
            }
        }
        if (toInPlot) {
            if (!plotManager.getPlotOwner(pistonLoc).equals(plotManager.getPlotOwner(to))) {
                return false;
            }
        }

        if (fromInPlot && !toInPlot) {
            return false;
        }
        if (!fromInPlot && toInPlot) {
            return false;
        }

        if (fromInPlot && toInPlot) {
            if (!plotManager.getPlotOwner(from).equals(plotManager.getPlotOwner(to))) {
                return false;
            }
        }

        return true;
    }

    /**
     * Sprawdza, czy gracz, który aktywuje tłok, jest właścicielem działki.
     */
    private boolean isOwner(Location pistonLocation) {
        Player player = pistonLocation.getWorld().getPlayers().stream()
                .filter(p -> p.getLocation().distanceSquared(pistonLocation) <= 1)
                .findFirst()
                .orElse(null);

        if (player != null && plotManager.isPlot(pistonLocation)) {
            UUID ownerUUID = plotManager.getPlotOwner(pistonLocation);
            return ownerUUID != null && ownerUUID.equals(player.getUniqueId());
        }
        return false;
    }
}