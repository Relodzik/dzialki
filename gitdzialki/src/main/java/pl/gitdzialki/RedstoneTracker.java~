package pl.gitdzialki;

import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Klasa śledząca, kto ostatnio aktywował mechanizmy redstone
 */
public class RedstoneTracker implements Listener {

    private final Main plugin;

    // Mapa przechowująca ostatniego gracza, który aktywował redstone w danym obszarze
    // Kluczem jest lokalizacja chunk'a (x, z), wartością UUID gracza
    private final Map<String, UUID> lastActivator = new ConcurrentHashMap<>();

    // Czas wygasania aktywacji (w milisekundach)
    private final Map<String, Long> activationTime = new ConcurrentHashMap<>();
    private static final long ACTIVATION_TIMEOUT = 10000; // 10 sekund

    public RedstoneTracker(Main plugin) {
        this.plugin = plugin;

        // Uruchom zadanie czyszczenia starych aktywacji co 60 sekund
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, this::cleanupOldActivations, 1200L, 1200L);
    }

    /**
     * Nasłuchuje interakcji gracza (naciskanie przycisków, dźwigni itp.)
     */
    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onPlayerInteract(PlayerInteractEvent event) {
        // Obsługujemy tylko prawym przyciskiem myszy
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) {
            return;
        }

        Block block = event.getClickedBlock();
        if (block == null) {
            return;
        }

        // Sprawdź, czy blok jest elementem redstone
        if (isRedstoneComponent(block)) {
            Player player = event.getPlayer();
            Location loc = block.getLocation();

            // Zapisz gracza jako ostatniego aktywatora w tym chunk'u
            String chunkKey = getChunkKey(loc);
            lastActivator.put(chunkKey, player.getUniqueId());
            activationTime.put(chunkKey, System.currentTimeMillis());
        }
    }

    /**
     * Nasłuchuje zmian stanu redstone
     */
    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onRedstoneChange(BlockRedstoneEvent event) {
        // Tylko gdy zmienia się z niskiego na wysoki poziom (aktywacja)
        if (event.getOldCurrent() == 0 && event.getNewCurrent() > 0) {
            Location loc = event.getBlock().getLocation();
            String chunkKey = getChunkKey(loc);

            // Odśwież czas aktywacji, jeśli istnieje już wpis dla tego chunk'a
            if (lastActivator.containsKey(chunkKey)) {
                activationTime.put(chunkKey, System.currentTimeMillis());
            }
        }
    }

    /**
     * Sprawdza, czy blok jest komponentem redstone
     */
    private boolean isRedstoneComponent(Block block) {
        switch (block.getType()) {
            case LEVER:
            case STONE_BUTTON:
            case OAK_BUTTON:
            case SPRUCE_BUTTON:
            case BIRCH_BUTTON:
            case JUNGLE_BUTTON:
            case ACACIA_BUTTON:
            case DARK_OAK_BUTTON:
            case CRIMSON_BUTTON:
            case WARPED_BUTTON:
            case MANGROVE_BUTTON:
            case BAMBOO_BUTTON:
            case CHERRY_BUTTON:
            case POLISHED_BLACKSTONE_BUTTON:
            case DAYLIGHT_DETECTOR:
            case TRIPWIRE_HOOK:
            case STONE_PRESSURE_PLATE:
            case OAK_PRESSURE_PLATE:
            case SPRUCE_PRESSURE_PLATE:
            case BIRCH_PRESSURE_PLATE:
            case JUNGLE_PRESSURE_PLATE:
            case ACACIA_PRESSURE_PLATE:
            case DARK_OAK_PRESSURE_PLATE:
            case CRIMSON_PRESSURE_PLATE:
            case WARPED_PRESSURE_PLATE:
            case MANGROVE_PRESSURE_PLATE:
            case BAMBOO_PRESSURE_PLATE:
            case CHERRY_PRESSURE_PLATE:
            case POLISHED_BLACKSTONE_PRESSURE_PLATE:
            case LIGHT_WEIGHTED_PRESSURE_PLATE:
            case HEAVY_WEIGHTED_PRESSURE_PLATE:
                return true;
            default:
                return false;
        }
    }

    /**
     * Tworzy klucz na podstawie chunk'a, w którym znajduje się lokalizacja
     */
    private String getChunkKey(Location loc) {
        return loc.getWorld().getName() + ":" + (loc.getBlockX() >> 4) + ":" + (loc.getBlockZ() >> 4);
    }

    /**
     * Czyści stare aktywacje, które wygasły
     */
    private void cleanupOldActivations() {
        long currentTime = System.currentTimeMillis();
        activationTime.entrySet().removeIf(entry ->
                currentTime - entry.getValue() > ACTIVATION_TIMEOUT
        );

        // Usuń aktywatorów, których czas wygasł
        lastActivator.keySet().removeIf(key -> !activationTime.containsKey(key));
    }

    /**
     * Sprawdza, czy gracz jest ostatnim aktywatorem redstone w pobliżu danej lokalizacji
     */
    public boolean isPlayerLastActivator(Player player, Location location) {
        String chunkKey = getChunkKey(location);
        UUID lastActivatorUUID = lastActivator.get(chunkKey);

        if (lastActivatorUUID == null) {
            return false; // Nikt nie aktywował redstone w tym obszarze
        }

        Long activationTimestamp = activationTime.get(chunkKey);
        if (activationTimestamp == null || System.currentTimeMillis() - activationTimestamp > ACTIVATION_TIMEOUT) {
            return false; // Aktywacja wygasła
        }

        return lastActivatorUUID.equals(player.getUniqueId());
    }

    /**
     * Zwraca UUID ostatniego aktywatora redstone w pobliżu danej lokalizacji
     */
    public UUID getLastActivatorUUID(Location location) {
        String chunkKey = getChunkKey(location);
        UUID lastActivatorUUID = lastActivator.get(chunkKey);

        if (lastActivatorUUID == null) {
            return null; // Nikt nie aktywował redstone w tym obszarze
        }

        Long activationTimestamp = activationTime.get(chunkKey);
        if (activationTimestamp == null || System.currentTimeMillis() - activationTimestamp > ACTIVATION_TIMEOUT) {
            return null; // Aktywacja wygasła
        }

        return lastActivatorUUID;
    }
}